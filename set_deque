import java.util.*;

public class SnakeGameII {
	Set<Integer> set;
	Deque<Integer> body;
	int score;
	int[][] food;
	int width;
	int height;
	
	public SnakeGameII(int width, int height, int[][] food){
		this.width=width;
		this.height=height;
		this.food=food;
		set=new HashSet<>();
		set.add(0);
		body=new LinkedList<>();
		body.offerLast(0);
	}
	public int move(String direction){
		if(score==-1){
			return -1;
		}
		int rowHead=body.peekFirst()/width;
		int colHead=body.peekFirst()%width;
		switch(direction){
			case "U": rowHead--; break;
			case "D": rowHead++; break;
			case "L": colHead--; break;
			case "R": colHead++; break;
		}
		int head=rowHead*width+colHead;
		set.remove(body.peekLast());
		//case 1: out of boundary or eating body
		// new head is legal to be in old tail's position, remove from set temporarily 
		if(rowHead<0||rowHead==height||colHead<0||colHead==width||set.contains(head)){
			return score=-1;
		}
		
		// add head for case2 and case3
		set.add(head);
		body.offerFirst(head);
		//case2: eating food, keep tail, add head
		if(score<food.length&&rowHead==food[score][0]&&colHead==food[score][1]){
			set.add(body.peekLast());
			++score;
		}
		//case3: normal move, remove tail, add head
		if(body.size()>score+1)  body.pollLast();
		return score;
	}
}
